#!/usr/bin/env bash

if [ -d "/usr/share/bcc/tools" ]; then
  export PATH="/usr/share/bcc/tools:${PATH}"
fi

if [ -d "{{ .User.home }}/go/bin" ]; then
  export PATH="{{ .User.home }}/go/bin:${PATH}"
fi

if [ -d "/usr/local/bin" ]; then
  export PATH="/usr/local/bin:${PATH}"
fi

if [ -d "{{ .User.home }}/.cargo/bin" ]; then
  export PATH="{{ .User.home }}/.cargo/bin:${PATH}"
fi

if [ -d "/sbin" ]; then
  export PATH="/sbin:${PATH}"
fi

if [ -d "/usr/sbin" ]; then
  export PATH="/usr/sbin:${PATH}"
fi

if [ -d "{{ .User.home }}/.pulumi/bin" ]; then
  export PATH="$PATH:{{ .User.home }}/.pulumi/bin"
fi

if [ -d "{{ .User.home }}/.nodenv" ]; then
  PATH="{{ .User.home }}/.nodenv/bin:$PATH"
  eval "$(nodenv init -)"
fi

if [ -d "{{ .User.home }}/.pyenv" ]; then
  PATH="{{ .User.home }}/.pyenv/bin:$PATH"
  eval "$(pyenv init -)"
fi

if [ -d "{{ .User.home }}/.goenv" ]; then
  PATH="{{ .User.home }}/.goenv/bin:$PATH"
  eval "$(goenv init -)"
fi

if [ -d "{{ .User.home }}/.local/bin" ]; then
  export PATH="{{ .User.home }}/.local/bin:${PATH}"
fi

if [ -n "$(command -v mcfly)" ]; then
  eval "$(mcfly init bash)"
fi

if [ -d "{{ .User.home }}/.nix-profile/share/" ]; then
  export XDG_DATA_DIRS="{{ .User.home }}/.local/share/:{{ .User.home }}/.nix-profile/share/:/usr/local/share:/usr/share"
fi

if [ -e "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh" ]; then
  # shellcheck disable=SC1091
  . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
fi

if [ -d "{{ .User.home }}/.local/share/JetBrains/Toolbox/scripts" ]; then
  export PATH="$PATH:{{ .User.home }}/.local/share/JetBrains/Toolbox/scripts"
fi

if [ -d "/opt/homebrew/bin" ]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi

if [ -d "/opt/homebrew/opt/coreutils/libexec/gnubin" ]; then
  export PATH="/opt/homebrew/opt/coreutils/libexec/gnubin:$PATH"
  export MANPATH="/opt/homebrew/opt/coreutils/libexec/gnuman:$MANPATH"
fi

if [ -d "/opt/homebrew/opt/make/libexec/gnubin" ]; then
  export PATH="/opt/homebrew/opt/make/libexec/gnubin:$PATH"
  export MANPATH="/opt/homebrew/opt/make/libexec/gnuman:$MANPATH"
fi

if [ -d "/opt/homebrew/opt/m4/bin" ]; then
  export PATH="/opt/homebrew/opt/m4/bin:$PATH"
fi

if [ -d "/opt/homebrew/opt/file-formula/bin" ]; then
  export PATH="/opt/homebrew/opt/file-formula/bin:$PATH"
fi

if [ -d "/opt/homebrew/opt/unzip/bin" ]; then
  export PATH="/opt/homebrew/opt/unzip/bin:$PATH"
fi

if [ -d "/opt/homebrew/opt/flex/bin" ]; then
  export PATH="/opt/homebrew/opt/flex/bin:$PATH"
  export LDFLAGS="-L/opt/homebrew/opt/flex/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/flex/include"
fi

if [ -d "/opt/homebrew/opt/bison/bin" ]; then
  export PATH="/opt/homebrew/opt/bison/bin:$PATH"
  export LDFLAGS="-L/opt/homebrew/opt/bison/lib"
fi

if [ -d "/opt/homebrew/opt/openssl@3/bin" ]; then
  export PATH="/opt/homebrew/opt/openssl@3/bin:$PATH"
  export LDFLAGS="-L/opt/homebrew/opt/openssl@3/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/openssl@3/include"
  export PKG_CONFIG_PATH="/opt/homebrew/opt/openssl@3/lib/pkgconfig"
fi

if [ -d "/opt/homebrew/opt/ed/libexec/gnubin" ]; then
  export PATH="/opt/homebrew/opt/ed/libexec/gnubin:$PATH"
fi

if [ -d "/opt/homebrew/opt/findutils/libexec/gnubin" ]; then
  export PATH="/opt/homebrew/opt/findutils/libexec/gnubin:$PATH"
fi

if [ -d "/opt/homebrew/opt/gnu-indent/libexec/gnubin" ]; then
  export PATH="/opt/homebrew/opt/gnu-indent/libexec/gnubin:$PATH"
fi

if [ -d "/opt/homebrew/opt/gnu-sed/libexec/gnubin" ]; then
  export PATH="/opt/homebrew/opt/gnu-sed/libexec/gnubin:$PATH"
fi

if [ -d "/opt/homebrew/opt/gnu-tar/libexec/gnubin" ]; then
  export PATH="/opt/homebrew/opt/gnu-tar/libexec/gnubin:$PATH"
fi

if [ -d "/opt/homebrew/opt/gnu-which/libexec/gnubin" ]; then
  export PATH="/opt/homebrew/opt/gnu-which/libexec/gnubin:$PATH"
fi

if [ -d "/opt/homebrew/opt/grep/libexec/gnubin" ]; then
  export PATH="/opt/homebrew/opt/grep/libexec/gnubin:$PATH"
fi

if [ -d "{{ .User.home }}/.krew" ]; then
  export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
fi

if command -v tenv >/dev/null; then
  export PATH=$(tenv update-path)
fi
